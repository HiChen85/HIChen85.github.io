{"title":"Golang Tutorial 5","uid":"21b7afb55dd7403da1611146a47b852e","slug":"Golang-Tutorial-5","date":"2021-09-12T12:18:36.000Z","updated":"2021-09-14T07:47:08.135Z","comments":true,"path":"api/articles/Golang-Tutorial-5.json","keywords":null,"cover":"/img/5.jpg","content":"<h1 id=\"Golang-Tutorila-5\"><a href=\"#Golang-Tutorila-5\" class=\"headerlink\" title=\"Golang Tutorila 5\"></a>Golang Tutorila 5</h1><h2 id=\"Map-Tutorial\"><a href=\"#Map-Tutorial\" class=\"headerlink\" title=\"Map Tutorial\"></a>Map Tutorial</h2><p>map 在 go语言中也是一种引用类型, 因此多使用 make 函数来创建.</p>\n<h3 id=\"基础语法格式\"><a href=\"#基础语法格式\" class=\"headerlink\" title=\"基础语法格式\"></a>基础语法格式</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> m <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>keyType<span class=\"token punctuation\">]</span>valueType\n\n<span class=\"token keyword\">var</span> studentId <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>同 slice 一样,如上述格式声明 map 类型后,打印结果显示,编译器为 studenId 变量分配了内存地址,但是并没有赋初值(未初始化,值为<code>nil</code>). 因为 map 是引用类型,需要使用 make 来为其赋初值.</p>\n<p>对一个值为 nil 的 slice 中添加元素是可行的, 具体做法便是使用 append 函数. 但是对于 map 来说不行.会引发 panic</p>\n<h3 id=\"make-方式声明-map-类型变量\"><a href=\"#make-方式声明-map-类型变量\" class=\"headerlink\" title=\"make 方式声明 map 类型变量\"></a>make 方式声明 map 类型变量</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">c <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token comment\">// 显式指定 map 中的k-v 对的数</span>\n<span class=\"token keyword\">var</span> m2 <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\nm3 <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>当声明完后, 此时 map 变量已经被分配了内存, 但由于未添加元素,所以是一个空的 map 但不是 <code>nil</code></p>\n<h3 id=\"map-的-key-和-value-字段的要求\"><a href=\"#map-的-key-和-value-字段的要求\" class=\"headerlink\" title=\"map 的 key 和 value 字段的要求\"></a>map 的 key 和 value 字段的要求</h3><p>key 允许的类型为 string, int, float, 或者内部字段全部为基本数据类型的结构体(目前很少用到), value 可以是任意值. 可以定义为一个空接口类型来接收各种类型的值. 因为函数在 go 中为一等公民, 因此 value 也可以接收函数类型的值. 换言之, 可以传入函数名作为 value, 这样就可以通过 key 来指定具体执行的函数,从而进行流程上的控制.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">mult</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 定义 value 为函数类型. 此处value 可以使用括号也可以不使用</span>\n<span class=\"token keyword\">var</span> m3 <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\nm<span class=\"token punctuation\">[</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> add\nm<span class=\"token punctuation\">[</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sub\nm<span class=\"token punctuation\">[</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mult\nm<span class=\"token punctuation\">[</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> divide\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注</strong>: 函数也是 go 中的一种类型.可以将函数名当做函数类型的常量,可将函数明作为参数或者值传给另一些变量或者函数参数中. 在函数章节中会详细介绍.</p>\n<h3 id=\"判断-map-中是否存在特定-key\"><a href=\"#判断-map-中是否存在特定-key\" class=\"headerlink\" title=\"判断 map 中是否存在特定 key\"></a>判断 map 中是否存在特定 key</h3><p>首先掌握 map 通过 key获取 value 的语法.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">value<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上述语法第一个参数为 key 对应的 value, 第二个 ok 表示 key 存在与否,当不存在时,返回 false. 存在时返回 true.</p>\n<p>通过上述的语法,go 中常用的用于判断某个 key 是否存在的语法如下</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"there is no such key in m\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"用-slice-作为-value\"><a href=\"#用-slice-作为-value\" class=\"headerlink\" title=\"用 slice 作为 value\"></a>用 slice 作为 value</h3><p>一个应用场景为: 当以 key 为父进程的 pid 时,所有该进程的子进程(子进程 pid)就需要用 slice 来存储.</p>\n<p>另外需要注意的是,由于 value 也是一个引用类型,因此在使用时需要预先进行一次 make 初始化内存操作.一面报错.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">m2 <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\nm2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  m2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span>\t\t<span class=\"token comment\">// 简单对 1 对应的 slice 中的元素赋值</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"获取-map-中元素的个数\"><a href=\"#获取-map-中元素的个数\" class=\"headerlink\" title=\"获取 map 中元素的个数\"></a>获取 map 中元素的个数</h3><p>使用 len 函数可以获取到 map 中存储的 k-v 对个数.</p>\n<h3 id=\"对-map-的排序\"><a href=\"#对-map-的排序\" class=\"headerlink\" title=\"对 map 的排序\"></a>对 map 的排序</h3><p>map 中的 key 和 value 都是无序的,如果想要对 map 排序,需要先将 map 中的 key 或者 value 取出存入一个 slice 中,然后利用sort 包对 key 进行排序. 再用循环打印出想要的序列.</p>\n<p>但经过测试, 在 map 中添加元素后,默认的排序方式是按照字符串首字母对应的 byte值(ASCII 码值)或者 rune 值(unicode 值)进行排序, 然后根据值得大小从小到大输出的.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">m2 <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\nm2<span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\nm2<span class=\"token punctuation\">[</span><span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">101</span>\nm2<span class=\"token punctuation\">[</span><span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">102</span>\nm2<span class=\"token punctuation\">[</span><span class=\"token string\">\"date\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">103</span>\nm2<span class=\"token punctuation\">[</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">101</span>\nm2<span class=\"token punctuation\">[</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">102</span>\ni <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> m2 <span class=\"token punctuation\">&#123;</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\nm2<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span> <span class=\"token operator\">+</span> i\ni<span class=\"token operator\">++</span>\n<span class=\"token punctuation\">&#125;</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>再看如下一段代码</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">m <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\nstus <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> stu <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> stus <span class=\"token punctuation\">&#123;</span>\n  m<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>stu\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> m <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token string\">\"=>\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这段代码最终的输出结果是所有的 key 对应的 value 都为 5, 因为其 value 部分保存的都是循环体变量的指针. 当range循环体变量循环到最后一个 slice 元素后, 复制最后一个元素的副本, 然后被保存到了 map 的 value 部分中.</p>\n<p><strong>这里有两点需要注意: 1. 因为 map 变量的 value 保存了 int 的指针,所以, 循环体变量再循环到最后一个 slice 元素后并未被释放内存. 2. 因为value 保存的是地址, 循环变量的地址是指向 slice 最后一个元素的副本,因此输出结果与 slice 最后一个元素的地址也是不同的.</strong></p>\n","feature":true,"text":"Golang Tutorila 5Map Tutorialmap 在 go语言中也是一种引用类型, 因此多使用 make 函数来创建. 基础语法格式var m map[keyType]valueType var studentId map[string]int 同 slice 一...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"Golang","slug":"Golang","count":6,"path":"api/categories/Golang.json"}],"tags":[{"name":"Programming Language","slug":"Programming-Language","count":6,"path":"api/tags/Programming-Language.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Golang-Tutorila-5\"><span class=\"toc-text\">Golang Tutorila 5</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Map-Tutorial\"><span class=\"toc-text\">Map Tutorial</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">基础语法格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#make-%E6%96%B9%E5%BC%8F%E5%A3%B0%E6%98%8E-map-%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">make 方式声明 map 类型变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#map-%E7%9A%84-key-%E5%92%8C-value-%E5%AD%97%E6%AE%B5%E7%9A%84%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">map 的 key 和 value 字段的要求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD-map-%E4%B8%AD%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E7%89%B9%E5%AE%9A-key\"><span class=\"toc-text\">判断 map 中是否存在特定 key</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%A8-slice-%E4%BD%9C%E4%B8%BA-value\"><span class=\"toc-text\">用 slice 作为 value</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96-map-%E4%B8%AD%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%AA%E6%95%B0\"><span class=\"toc-text\">获取 map 中元素的个数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9-map-%E7%9A%84%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">对 map 的排序</span></a></li></ol></li></ol></li></ol>","author":{"name":"Hccc丶","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"曾经沧海难为水, 除却巫山不是云<br/>取次花丛懒回顾, 半缘修道半缘君","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/github.svg","link":"https://github.com/HiChen85"},"bilibili":{"icon":"/svg/logo.svg","link":"https://space.bilibili.com/512394874"}}}},"mapped":true,"prev_post":{"title":"Golang Tutorial 6","uid":"eaefd71f93a58b7ced195ad6747e390e","slug":"Golang-Tutorial-6","date":"2021-09-13T04:16:04.000Z","updated":"2021-09-14T07:47:28.019Z","comments":true,"path":"api/articles/Golang-Tutorial-6.json","keywords":null,"cover":"/img/6.jpg","text":"Golang Tutorial 6Struct结构体结构体定义基本语法使用 type 和 struct 关键字来定义一个自定义的类型. type Name struct&#123; field1 type1 `json:\"field1\"` field2 type2 `json:\"...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"Golang","slug":"Golang","count":6,"path":"api/categories/Golang.json"}],"tags":[{"name":"Programming Language","slug":"Programming-Language","count":6,"path":"api/tags/Programming-Language.json"}],"author":{"name":"Hccc丶","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"曾经沧海难为水, 除却巫山不是云<br/>取次花丛懒回顾, 半缘修道半缘君","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/github.svg","link":"https://github.com/HiChen85"},"bilibili":{"icon":"/svg/logo.svg","link":"https://space.bilibili.com/512394874"}}}},"feature":true},"next_post":{"title":"Golang Tutorial 4","uid":"ed56a0be6c67a53488e6ffd0f75904e2","slug":"Golang-Tutorial-4","date":"2021-09-05T22:06:48.000Z","updated":"2021-09-14T07:46:54.638Z","comments":true,"path":"api/articles/Golang-Tutorial-4.json","keywords":null,"cover":"/img/4.jpg","text":"Golang Tutorial 4切片(slice)Golang 中的切片是对数组一个连续片段的引用, 因此是引用类型. 这个连续的片段可以是整个数组,也可以是由开发者指定的开始和结束索引限定的一段连续片段. 从集合的角度来看,若数组是一个元素集合,则切片就是它的一系列非空子集....","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"Golang","slug":"Golang","count":6,"path":"api/categories/Golang.json"}],"tags":[{"name":"Programming Language","slug":"Programming-Language","count":6,"path":"api/tags/Programming-Language.json"}],"author":{"name":"Hccc丶","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"曾经沧海难为水, 除却巫山不是云<br/>取次花丛懒回顾, 半缘修道半缘君","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/github.svg","link":"https://github.com/HiChen85"},"bilibili":{"icon":"/svg/logo.svg","link":"https://space.bilibili.com/512394874"}}}},"feature":true}}