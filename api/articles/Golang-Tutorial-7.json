{"title":"Golang Tutorial 7","uid":"de3eee39821c26516f0a3be9bd55d485","slug":"Golang-Tutorial-7","date":"2021-09-14T07:52:44.000Z","updated":"2021-09-14T10:09:27.880Z","comments":true,"path":"api/articles/Golang-Tutorial-7.json","keywords":null,"cover":"/img/7.jpg","content":"<h1 id=\"Golang-Tutorial-7-继承与多态\"><a href=\"#Golang-Tutorial-7-继承与多态\" class=\"headerlink\" title=\"Golang Tutorial 7 继承与多态\"></a>Golang Tutorial 7 继承与多态</h1><h2 id=\"Golang-中的继承\"><a href=\"#Golang-中的继承\" class=\"headerlink\" title=\"Golang 中的继承\"></a>Golang 中的继承</h2><p>在 Go 中,继承实际是由类型组合来实现的, 根据前一节的内容, Go 的结构体中支持匿名字段, 由类型名作为字段名,且在实际使用时, 可以被省略.</p>\n<p>下面以一个动物的例子来展示如何使用继承. 同时使用一个汽车的例子来表示组合</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Animal <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tname <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span>Animal<span class=\"token punctuation\">)</span> <span class=\"token function\">Cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"are Crying\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> Dog <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tfeet <span class=\"token builtin\">int</span>\n\t<span class=\"token operator\">*</span>Animal\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewDog</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> feet <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Dog <span class=\"token punctuation\">&#123;</span>\n\tanimal <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span>\n\tanimal<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Dog<span class=\"token punctuation\">&#123;</span>\n\t\tfeet<span class=\"token punctuation\">:</span> feet<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token comment\">// 匿名字段在初始化时需要使用该字段的类型作为字段名</span>\n\t\tAnimal<span class=\"token punctuation\">:</span> animal<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Override the Animal's Cry method</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Dog<span class=\"token punctuation\">)</span> <span class=\"token function\">Cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"is a dog. He barks\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>Dog<span class=\"token punctuation\">)</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"run to the window\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> Bird <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tfeet <span class=\"token builtin\">int</span>\n\t<span class=\"token operator\">*</span>Animal\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewBird</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> feet <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Bird <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Bird<span class=\"token punctuation\">&#123;</span>\n\t\tfeet<span class=\"token punctuation\">:</span> feet<span class=\"token punctuation\">,</span>\n\t\tAnimal<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Animal<span class=\"token punctuation\">&#123;</span>\n\t\t\tname<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Override the Animal's Cry method</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>Bird<span class=\"token punctuation\">)</span> <span class=\"token function\">Cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"is a bird. He is tweeting\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>Bird<span class=\"token punctuation\">)</span> <span class=\"token function\">Fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"flying to the sky!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> Cat <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tfeet <span class=\"token builtin\">int</span>\n\t<span class=\"token operator\">*</span>Animal\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewCat</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> feet <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Cat <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Cat<span class=\"token punctuation\">&#123;</span>\n\t\tfeet<span class=\"token punctuation\">:</span>   feet<span class=\"token punctuation\">,</span>\n\t\tAnimal<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Animal<span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tdog <span class=\"token operator\">:=</span> <span class=\"token function\">NewDog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"黄四郎\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\tdog<span class=\"token punctuation\">.</span><span class=\"token function\">Cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tdog<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tbird <span class=\"token operator\">:=</span> <span class=\"token function\">NewBird</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bili\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\tbird<span class=\"token punctuation\">.</span><span class=\"token function\">Cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tbird<span class=\"token punctuation\">.</span><span class=\"token function\">Fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tcat <span class=\"token operator\">:=</span> <span class=\"token function\">NewCat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mimi\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\tcat<span class=\"token punctuation\">.</span><span class=\"token function\">Cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个例子包含了一个 Animal 类, 一个 Dog 类, 一个 Bird 类型和一个 Cat 类型.</p>\n<p><strong>Dog, Cat 和 Bird 都内嵌了匿名字段Animal. 同时 Dog 和 Bird 都重写了 Animal 的 Cry 方法. 根据程序的运行结果可以知道, Dog 和 Bird 都实现了各自的 Cry 行为. Cat 未重写 Animal 的 Cry 方法, 所以仍然使用了 Animal 的 Cry 方法.</strong></p>\n<p><strong>同时需注意的是:实际在 cat 对象中调用 Cry 的过程为 <code>cat.Animal.Cry</code>,  由于Animal 字段是 Cat类型中的匿名字段,所以被省略了</strong>.</p>\n<h2 id=\"Golang-中的多态\"><a href=\"#Golang-中的多态\" class=\"headerlink\" title=\"Golang 中的多态\"></a>Golang 中的多态</h2><p>OOP 中的多态核心概念为: 父类引用指向具体的子类对象. 这一概念包括了<strong>变量的声明以及形参的定义.</strong></p>\n<p>在 go中由于没有显式的继承概念,所以并无父类与子类的概念, 因此想要实现多态, 需使用另外的语言特性.也就是接口.</p>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>简单理解接口就是一系列方法(现实中某一类型的行为)集合, 在接口中,只允许方法的定义(声明), 包括参数列表和返回值列表,但不包括具体实现.</p>\n<p>Go 中的接口语法为: 凡是实现了接口中<strong>所有</strong>的方法的类型都可以被指向接口类型, 只实现接口中<strong>部分方法</strong>的类型不能被接口类型变量所指向.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">type</span> SmartPhone <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">Call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">SendMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">Surfing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">GetSeries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> IPhone <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tSeries <span class=\"token builtin\">string</span>\n\tsize   <span class=\"token builtin\">float64</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewIPhone</span><span class=\"token punctuation\">(</span>series <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> size <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>IPhone <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>IPhone<span class=\"token punctuation\">&#123;</span>\n\t\tSeries<span class=\"token punctuation\">:</span> series<span class=\"token punctuation\">,</span>\n\t\tsize<span class=\"token punctuation\">:</span>   size<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// IPhone 实现了 SmartPhone接口中的全部方法</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span>IPhone<span class=\"token punctuation\">)</span> <span class=\"token function\">Call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span>IPhone<span class=\"token punctuation\">)</span> <span class=\"token function\">SendMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span>IPhone<span class=\"token punctuation\">)</span> <span class=\"token function\">Surfing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span>IPhone<span class=\"token punctuation\">)</span> <span class=\"token function\">GetSeries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">.</span>Series\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> Nokia <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tSeries <span class=\"token builtin\">string</span>\n\tsize   <span class=\"token builtin\">float64</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewNokia</span><span class=\"token punctuation\">(</span>series <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> size <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Nokia <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Nokia<span class=\"token punctuation\">&#123;</span>\n\t\tSeries<span class=\"token punctuation\">:</span> series<span class=\"token punctuation\">,</span>\n\t\tsize<span class=\"token punctuation\">:</span>   size<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Nokia 并未实现 Surfing 方法</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span>Nokia<span class=\"token punctuation\">)</span> <span class=\"token function\">Call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span>Nokia<span class=\"token punctuation\">)</span> <span class=\"token function\">SendMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span>Nokia<span class=\"token punctuation\">)</span> <span class=\"token function\">GetSeries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> n<span class=\"token punctuation\">.</span>Series\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Buy</span><span class=\"token punctuation\">(</span>smartPhone SmartPhone<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I bought a(n) %v \\n\"</span><span class=\"token punctuation\">,</span> smartPhone<span class=\"token punctuation\">.</span><span class=\"token function\">GetSeries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tiphone <span class=\"token operator\">:=</span> <span class=\"token function\">NewIPhone</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IPhone 13\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.7</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">Buy</span><span class=\"token punctuation\">(</span>iphone<span class=\"token punctuation\">)</span>\n\n\tnokia <span class=\"token operator\">:=</span> <span class=\"token function\">NewNokia</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nokia 15.6\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.6</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// cannot use nokia (variable of type *Nokia) as SmartPhone value in argument to Buy:</span>\n\t<span class=\"token comment\">// missing method Surfing</span>\n\t<span class=\"token function\">Buy</span><span class=\"token punctuation\">(</span>nokia<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 此行报错</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>根据上述代码在编译期间的结果, Nokia 未实现 Surfing 方法, 因此不能被当做是一个 SmartPhone 接口的变量.无法传入到 Buy 函数中去.</p>\n<p><strong>结论: 只有实现了接口中所有方法的类型才能被接口类型接收.</strong></p>\n","text":"Golang Tutorial 7 继承与多态Golang 中的继承在 Go 中,继承实际是由类型组合来实现的, 根据前一节的内容, Go 的结构体中支持匿名字段, 由类型名作为字段名,且在实际使用时, 可以被省略. 下面以一个动物的例子来展示如何使用继承. 同时使用一个汽车的例...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"Golang","slug":"Golang","count":9,"path":"api/categories/Golang.json"}],"tags":[{"name":"Programming Language","slug":"Programming-Language","count":9,"path":"api/tags/Programming-Language.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Golang-Tutorial-7-%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%A4%9A%E6%80%81\"><span class=\"toc-text\">Golang Tutorial 7 继承与多态</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Golang-%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">Golang 中的继承</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Golang-%E4%B8%AD%E7%9A%84%E5%A4%9A%E6%80%81\"><span class=\"toc-text\">Golang 中的多态</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">接口</span></a></li></ol></li></ol></li></ol>","author":{"name":"Hccc丶","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"曾经沧海难为水, 除却巫山不是云<br/>取次花丛懒回顾, 半缘修道半缘君","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/github.svg","link":"https://github.com/HiChen85"},"bilibili":{"icon":"/svg/logo.svg","link":"https://space.bilibili.com/512394874"}}}},"mapped":true,"prev_post":{"title":"Golang Tutorial 8","uid":"b7b9075ba8f3fce9f65889bb535dd257","slug":"Golang-Tutorial-8","date":"2021-09-14T10:10:28.000Z","updated":"2021-09-15T09:37:14.838Z","comments":true,"path":"api/articles/Golang-Tutorial-8.json","keywords":null,"cover":"/img/8.jpg","text":"Golang Tutorial 8类型的 String 方法和格式化描述符String()方法当定义了一个具有很多方法的类型时, 常常也会实现一个 String()方法来定制类型的字符串形式的输出. 如果一个类型定义了 String()方法,那么它会被 fmt.Printf()当...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"Golang","slug":"Golang","count":9,"path":"api/categories/Golang.json"}],"tags":[{"name":"Programming Language","slug":"Programming-Language","count":9,"path":"api/tags/Programming-Language.json"}],"author":{"name":"Hccc丶","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"曾经沧海难为水, 除却巫山不是云<br/>取次花丛懒回顾, 半缘修道半缘君","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/github.svg","link":"https://github.com/HiChen85"},"bilibili":{"icon":"/svg/logo.svg","link":"https://space.bilibili.com/512394874"}}}}},"next_post":{"title":"Golang Tutorial 6","uid":"eaefd71f93a58b7ced195ad6747e390e","slug":"Golang-Tutorial-6","date":"2021-09-13T04:16:04.000Z","updated":"2021-09-14T07:47:28.019Z","comments":true,"path":"api/articles/Golang-Tutorial-6.json","keywords":null,"cover":"/img/6.jpg","text":"Golang Tutorial 6Struct结构体结构体定义基本语法使用 type 和 struct 关键字来定义一个自定义的类型. type Name struct&#123; field1 type1 `json:\"field1\"` field2 type2 `json:\"...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"Golang","slug":"Golang","count":9,"path":"api/categories/Golang.json"}],"tags":[{"name":"Programming Language","slug":"Programming-Language","count":9,"path":"api/tags/Programming-Language.json"}],"author":{"name":"Hccc丶","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"曾经沧海难为水, 除却巫山不是云<br/>取次花丛懒回顾, 半缘修道半缘君","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/github.svg","link":"https://github.com/HiChen85"},"bilibili":{"icon":"/svg/logo.svg","link":"https://space.bilibili.com/512394874"}}}}}}