{"title":"Golang Tutorial 6","uid":"eaefd71f93a58b7ced195ad6747e390e","slug":"Golang-Tutorial-6","date":"2021-09-13T04:16:04.000Z","updated":"2021-09-14T07:47:28.019Z","comments":true,"path":"api/articles/Golang-Tutorial-6.json","keywords":null,"cover":"/img/6.jpg","content":"<h1 id=\"Golang-Tutorial-6\"><a href=\"#Golang-Tutorial-6\" class=\"headerlink\" title=\"Golang Tutorial 6\"></a>Golang Tutorial 6</h1><h2 id=\"Struct结构体\"><a href=\"#Struct结构体\" class=\"headerlink\" title=\"Struct结构体\"></a>Struct结构体</h2><h3 id=\"结构体定义基本语法\"><a href=\"#结构体定义基本语法\" class=\"headerlink\" title=\"结构体定义基本语法\"></a>结构体定义基本语法</h3><p>使用 type 和 struct 关键字来定义一个自定义的类型.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Name <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span>\n  field1 type1\t<span class=\"token string\">`json:\"field1\"`</span>\n  field2 type2\t<span class=\"token string\">`json:\"field2\"`</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"在程序中声明结构体类型的变量\"><a href=\"#在程序中声明结构体类型的变量\" class=\"headerlink\" title=\"在程序中声明结构体类型的变量\"></a>在程序中声明结构体类型的变量</h3><h3 id=\"声明变量\"><a href=\"#声明变量\" class=\"headerlink\" title=\"声明变量\"></a>声明变量</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Student <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n  name \t\t\t<span class=\"token builtin\">string</span>\n  age \t\t\t<span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> s1 Student\t\t<span class=\"token comment\">// 先声明一个结构体类型的变量.然后进行赋值</span>\n  s1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span>\n  s1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">19</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"使用-new-声明结构体变量指针\"><a href=\"#使用-new-声明结构体变量指针\" class=\"headerlink\" title=\"使用 new 声明结构体变量指针\"></a>使用 new 声明结构体变量指针</h3><p>go 中提供了一个语法糖, 针对结构体类型的变量, 无论是普通变量还是指针变量, 都可以直接使用<code>.</code>号直接访问字段.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// var s2 *Student</span>\n<span class=\"token comment\">// s2 = new(Student)</span>\ns2 <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">)</span>\ns2<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"李四\"</span>\ns2<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>需要注意的是不论<code>new</code> 还是直接声明结构体变量, 编译器都会为 struct 类型分配内存,因其是值类型的.</p>\n<h3 id=\"显式初始化\"><a href=\"#显式初始化\" class=\"headerlink\" title=\"显式初始化\"></a>显式初始化</h3><p>显式初始化的语法和 map 的显示初始化类似,不过 map 的初始化是以 key-value 形式出现,所有 key 类型都是一致的. 而结构体的内部成员冒号前面是字段名,冒号后是字段值.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">s3 <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Student<span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">&#125;</span>\ns4 <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Student<span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token punctuation\">:</span><span class=\"token string\">\"汤师爷\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在 s4 的声明过程中, 这种声明方式可以省略部分字段,由编译器来赋一个对应类型的 0 值.</p>\n<p><strong>注</strong>: new 的作用等同于<code>&amp;Student&#123;&#125;</code>这样声明一个未初始化的结构体变量.</p>\n<h3 id=\"结构体的内存布局\"><a href=\"#结构体的内存布局\" class=\"headerlink\" title=\"结构体的内存布局\"></a>结构体的内存布局</h3><p>在 go 中,结构体和它所包含的数据是被存放在连续的内存块中的,且存在一个内存对齐的机制来保证其高效性. 内存对齐机制,大致可以理解为按照一个对齐系数来对齐这块内存,如果结构体内部的数据类型之间的偏移量不是 对齐系数的整数倍,就需要补充一定的内存使其对齐.</p>\n<h2 id=\"使用工厂方法创建结构体实例\"><a href=\"#使用工厂方法创建结构体实例\" class=\"headerlink\" title=\"使用工厂方法创建结构体实例\"></a>使用工厂方法创建结构体实例</h2><p>使用工厂方法创建结构体,也可以叫做为结构体类型创建构造器. 一般来说根据结构体内部的成员来显式地创建并返回一个结构体变量.工厂方法的一般规则为用New+类型名作为工厂方法, 成员变量为参数.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Student <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n  name <span class=\"token builtin\">string</span>\n  age <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewStudent</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> age <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Studnet <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> name <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Student<span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">:</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span>age<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 使用 new 的 构造函数或工厂方法</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewStudent</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> age <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Student <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> name <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n  <span class=\"token punctuation\">&#125;</span>\n  student <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">)</span>\n  student<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  student<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n  <span class=\"token keyword\">return</span> student\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"匿名字段与内嵌结构体\"><a href=\"#匿名字段与内嵌结构体\" class=\"headerlink\" title=\"匿名字段与内嵌结构体\"></a>匿名字段与内嵌结构体</h2><p>go 语言结构体可以包含一个或者多个匿名字段,简言之,匿名字段就是没有字段名,只有字段类型. 而此时,<strong>类型名就是字段名</strong>. 匿名字段也可以是一个结构体类型, 从而有了所谓的内嵌结构体.</p>\n<p><strong>在每一个结构体中,因为字段名必须唯一, 所以同种数据类型只能有一个匿名字段.</strong></p>\n<p>而匿名字段这一特性在 go 中被用来模拟 OOP 中的继承行为. 在 go 中,继承是通过内嵌结构体和类型组合来实现的.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Address <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n  Province \t<span class=\"token builtin\">string</span>\n  City \t\t\t<span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> Person <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n  name <span class=\"token builtin\">string</span>\n  age <span class=\"token builtin\">int</span>\n  Address\t\t<span class=\"token comment\">// 嵌套一个匿名字段</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  p1 <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span>\n  p1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"张麻子\"</span>\n  p1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">40</span>\n  p1<span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">.</span>Province <span class=\"token operator\">=</span> <span class=\"token string\">\"广东省\"</span>\n  p1<span class=\"token punctuation\">.</span>City <span class=\"token operator\">=</span> <span class=\"token string\">\"鹅城\"</span>\t\t<span class=\"token comment\">// 省略了内嵌匿名字段名</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>从上述代码可以看出, 当访问匿名字段类型内的数据时,可以省略这个匿名字段,直接由外部类型来访问内嵌匿名类型的字段.</p>\n<h2 id=\"类型方法\"><a href=\"#类型方法\" class=\"headerlink\" title=\"类型方法\"></a>类型方法</h2><p>Go 中所说的方法是作用在一个叫做 receiver 上的函数. Receiver(接收者)是特定类型的变量或者指针变量. 它绑定了函数来展示它所具备的功能.</p>\n<p>当前的go 版本 <code>1.17</code>支持值类型变量或者指针变量调用值类型接收者的方法或者指针类型接收者的方法. 没有限制. 但个人认为在不涉及修改结构体实例的内部数据时,使用值类型接收者.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Dog <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n  name <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 构造一个工厂方法或者叫构造函数</span>\n<span class=\"token keyword\">func</span> NewDog <span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Dog <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Dog<span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">:</span>name<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 设置改变私有变量的导出方法.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>this <span class=\"token operator\">*</span>Dog<span class=\"token punctuation\">)</span> <span class=\"token function\">SetName</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  this<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 值类型接收者以及方法</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d Dog<span class=\"token punctuation\">)</span> <span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span>name\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>this <span class=\"token operator\">*</span>Dog<span class=\"token punctuation\">)</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"move to the door\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> Leader <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tname <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewLeader</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Leader <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Leader<span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">*</span>Leader<span class=\"token punctuation\">)</span> <span class=\"token function\">CleanUpBandit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"县长来了, 枪在手, 跟我走\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"关于何时使用指针接收者\"><a href=\"#关于何时使用指针接收者\" class=\"headerlink\" title=\"关于何时使用指针接收者\"></a>关于何时使用指针接收者</h3><ol>\n<li>当需要修改接收者中的值时</li>\n<li>当接收者是拷贝代价比较大的大对象</li>\n<li>当某个方法使用了指针类型的接收者时, 其他方法最好也是使用指针类型的接收者</li>\n</ol>\n","text":"Golang Tutorial 6Struct结构体结构体定义基本语法使用 type 和 struct 关键字来定义一个自定义的类型. type Name struct&#123; field1 type1 `json:\"field1\"` field2 type2 `json:\"...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"Golang","slug":"Golang","count":9,"path":"api/categories/Golang.json"}],"tags":[{"name":"Programming Language","slug":"Programming-Language","count":9,"path":"api/tags/Programming-Language.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Golang-Tutorial-6\"><span class=\"toc-text\">Golang Tutorial 6</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Struct%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\">Struct结构体</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E4%BD%93%E5%AE%9A%E4%B9%89%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">结构体定义基本语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E5%A3%B0%E6%98%8E%E7%BB%93%E6%9E%84%E4%BD%93%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">在程序中声明结构体类型的变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">声明变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-new-%E5%A3%B0%E6%98%8E%E7%BB%93%E6%9E%84%E4%BD%93%E5%8F%98%E9%87%8F%E6%8C%87%E9%92%88\"><span class=\"toc-text\">使用 new 声明结构体变量指针</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%98%BE%E5%BC%8F%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">显式初始化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80\"><span class=\"toc-text\">结构体的内存布局</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E5%88%9B%E5%BB%BA%E7%BB%93%E6%9E%84%E4%BD%93%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">使用工厂方法创建结构体实例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%BF%E5%90%8D%E5%AD%97%E6%AE%B5%E4%B8%8E%E5%86%85%E5%B5%8C%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\">匿名字段与内嵌结构体</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">类型方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8%E6%8C%87%E9%92%88%E6%8E%A5%E6%94%B6%E8%80%85\"><span class=\"toc-text\">关于何时使用指针接收者</span></a></li></ol></li></ol></li></ol>","author":{"name":"Hccc丶","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"曾经沧海难为水, 除却巫山不是云<br/>取次花丛懒回顾, 半缘修道半缘君","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/github.svg","link":"https://github.com/HiChen85"},"bilibili":{"icon":"/svg/logo.svg","link":"https://space.bilibili.com/512394874"}}}},"mapped":true,"prev_post":{"title":"Golang Tutorial 7","uid":"de3eee39821c26516f0a3be9bd55d485","slug":"Golang-Tutorial-7","date":"2021-09-14T07:52:44.000Z","updated":"2021-09-14T10:09:27.880Z","comments":true,"path":"api/articles/Golang-Tutorial-7.json","keywords":null,"cover":"/img/7.jpg","text":"Golang Tutorial 7 继承与多态Golang 中的继承在 Go 中,继承实际是由类型组合来实现的, 根据前一节的内容, Go 的结构体中支持匿名字段, 由类型名作为字段名,且在实际使用时, 可以被省略. 下面以一个动物的例子来展示如何使用继承. 同时使用一个汽车的例...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"Golang","slug":"Golang","count":9,"path":"api/categories/Golang.json"}],"tags":[{"name":"Programming Language","slug":"Programming-Language","count":9,"path":"api/tags/Programming-Language.json"}],"author":{"name":"Hccc丶","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"曾经沧海难为水, 除却巫山不是云<br/>取次花丛懒回顾, 半缘修道半缘君","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/github.svg","link":"https://github.com/HiChen85"},"bilibili":{"icon":"/svg/logo.svg","link":"https://space.bilibili.com/512394874"}}}}},"next_post":{"title":"Golang Tutorial 5","uid":"21b7afb55dd7403da1611146a47b852e","slug":"Golang-Tutorial-5","date":"2021-09-12T12:18:36.000Z","updated":"2021-09-14T07:47:08.135Z","comments":true,"path":"api/articles/Golang-Tutorial-5.json","keywords":null,"cover":"/img/5.jpg","text":"Golang Tutorila 5Map Tutorialmap 在 go语言中也是一种引用类型, 因此多使用 make 函数来创建. 基础语法格式var m map[keyType]valueType var studentId map[string]int 同 slice 一...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"Golang","slug":"Golang","count":9,"path":"api/categories/Golang.json"}],"tags":[{"name":"Programming Language","slug":"Programming-Language","count":9,"path":"api/tags/Programming-Language.json"}],"author":{"name":"Hccc丶","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"曾经沧海难为水, 除却巫山不是云<br/>取次花丛懒回顾, 半缘修道半缘君","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/github.svg","link":"https://github.com/HiChen85"},"bilibili":{"icon":"/svg/logo.svg","link":"https://space.bilibili.com/512394874"}}}}}}