{"title":"Golang tutorial 1","uid":"940d915bf94905eae8346cbc13db5243","slug":"Golang-tutorial-1","date":"2021-08-29T21:34:48.000Z","updated":"2021-09-03T05:53:17.695Z","comments":true,"path":"api/articles/Golang-tutorial-1.json","keywords":null,"cover":"/img/1.jpg","content":"<h1 id=\"Golang-Tutorial-1\"><a href=\"#Golang-Tutorial-1\" class=\"headerlink\" title=\"Golang Tutorial 1\"></a>Golang Tutorial 1</h1><h1 id=\"Golang-Constant-Keywords\"><a href=\"#Golang-Constant-Keywords\" class=\"headerlink\" title=\"Golang Constant Keywords\"></a>Golang Constant Keywords</h1><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> PI <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.1415926</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"特殊常量-iota\"><a href=\"#特殊常量-iota\" class=\"headerlink\" title=\"特殊常量: iota\"></a>特殊常量: iota</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\ta <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span>\t<span class=\"token comment\">// iota 第一次出现时为 0,</span>\n  b\t\t\t\t\t<span class=\"token comment\">// b = 1</span>\n  c\t\t\t\t\t<span class=\"token comment\">// c = 2</span>\n  d <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n  e\t\t\t\t\t<span class=\"token comment\">// e = 10</span>\n  f\t\t\t\t\t<span class=\"token comment\">// f = 10</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上述代码中的为 iota 的简单使用, iota 第一次出现时,初值为 0, 后续如果不为新的常量设置初值,则 iota 会递增, 直至遇到一个显式赋值的常量. iota 不在自增.</p>\n<h4 id=\"典型的-iota-使用案例\"><a href=\"#典型的-iota-使用案例\" class=\"headerlink\" title=\"典型的 iota 使用案例\"></a>典型的 iota 使用案例</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> Byte <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span>\n  KB <span class=\"token operator\">=</span> Byte <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token operator\">*</span><span class=\"token boolean\">iota</span><span class=\"token punctuation\">)</span>\n  MB\n  GB\n  TB\n  PB\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Golang-variables-Keywords\"><a href=\"#Golang-variables-Keywords\" class=\"headerlink\" title=\"Golang variables Keywords\"></a>Golang variables Keywords</h1><p>在 go 中,所有的变量在定义之后,若没有显式赋值,则为该类型的0 值.</p>\n<p>如果只定义了变量而未在程序中使用,则编译不能通过</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">/*\n\t第一种变量声明方式,\n\t对于基本类型来说,编译器可以直接进行推断,对于复杂类型,\n*/</span>\n<span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">var</span> b <span class=\"token builtin\">float32</span> <span class=\"token operator\">=</span> <span class=\"token number\">10.55</span>\n\n<span class=\"token comment\">/*\n\t第二种变量声明方式, 多用于函数体内\n*/</span>\nc <span class=\"token operator\">:=</span> <span class=\"token string\">\"Hello World\"</span>\n\n<span class=\"token comment\">/*\n\t一次性声明多个变量, 在声明变量时,括号内部如果为多行,则不需要等号\n*/</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\ta <span class=\"token builtin\">int</span>\n  b <span class=\"token builtin\">int</span>\n  c <span class=\"token builtin\">float64</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 或者可以使用如下方式定义多个同种类型的变量</span>\n<span class=\"token keyword\">var</span> a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Go 也支持对变量的同时(并行)赋值</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"你好\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"特殊变量\"><a href=\"#特殊变量\" class=\"headerlink\" title=\"特殊变量\"></a>特殊变量</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// _ 下划线变量为一个只写变量,当我们有时不需要使用某些函数返回的部分返回值时,可以使用_来抛弃不需要的返回值</span>\n<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 在使用 range 关键字时, 会对被遍历的可迭代元素产生两个值,</span>\n  <span class=\"token comment\">// 如果是 slice 或者 array, 则第一个值为元素索引,第二个值</span>\n  <span class=\"token comment\">// 为元素值.</span>\n  <span class=\"token comment\">// 如果被迭代对象为 map, 则第一个值为 key, 第二个值为 value.</span>\n  <span class=\"token comment\">// 如果是字符串, 则第一个值为单个 unicode 字符的起始索引,</span>\n  <span class=\"token comment\">// 因为 unicode 在 go 语言中占据长度不同, range 每次只能遍历一个字符,</span>\n  <span class=\"token comment\">// 所以,在 遍历字符串变量时, 第一个值可能并不连续.</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\t\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Golang-Basic-Datatype\"><a href=\"#Golang-Basic-Datatype\" class=\"headerlink\" title=\"Golang Basic Datatype\"></a>Golang Basic Datatype</h1><ol>\n<li><h3 id=\"bool类型\"><a href=\"#bool类型\" class=\"headerlink\" title=\"bool类型\"></a>bool类型</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> varName <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">if</span> varName <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"false\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><h3 id=\"数值型\"><a href=\"#数值型\" class=\"headerlink\" title=\"数值型\"></a>数值型</h3><p>在 golang 中, 默认不写类型名时, 浮点数的类型为 float64. 与操作系统的位数有关.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> a1 <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token keyword\">var</span> a2 <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\na3 <span class=\"token operator\">:=</span> <span class=\"token number\">300</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">,</span> a3<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> b1 <span class=\"token builtin\">float32</span> <span class=\"token operator\">=</span> <span class=\"token number\">12.88</span>\n<span class=\"token keyword\">var</span> b2 <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.1415926</span>\n<span class=\"token keyword\">var</span> b3 <span class=\"token operator\">=</span> <span class=\"token number\">8221.441</span>  <span class=\"token comment\">// 默认类型为 float64</span>\nb4 <span class=\"token operator\">:=</span> <span class=\"token number\">741.245312353</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>golang 中的字符串是由单个字节连接起来的(英语字符), Go的字节使用 UTF-8编码来标识Unicode 字符集</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> s1 <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span>\n<span class=\"token keyword\">var</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"你好, golang\"</span>\ns3 <span class=\"token operator\">:=</span> <span class=\"token string\">\"我爱学 go 语言\"</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s1: %v\\n\"</span><span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s2: %v\\n\"</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s3: %v\\n\"</span><span class=\"token punctuation\">,</span> s3<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><h3 id=\"其他数字类型\"><a href=\"#其他数字类型\" class=\"headerlink\" title=\"其他数字类型\"></a>其他数字类型</h3><table>\n<thead>\n<tr>\n<th>byte 字节型</th>\n<th>uint8</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>rune Unicode 字符编码</td>\n<td>int32</td>\n</tr>\n</tbody></table>\n</li>\n<li><h3 id=\"值类型与引用类型\"><a href=\"#值类型与引用类型\" class=\"headerlink\" title=\"值类型与引用类型\"></a>值类型与引用类型</h3><p>golang 中引用类型只有三种<code>slice</code>, <code>map</code>和<code>channel</code>. </p>\n<p>其他的变量类型均属于值类型.</p>\n<p>值类型与引用类型变量的区别就是在函数传参时,是否会产生副本.</p>\n<p>因此诞生了两中传参方式: 值传递与引用传递.</p>\n<p>值传递: 当一个值类型变量传入函数时, 编译器首先复制该变量,产生一个副本,然后将副本传入到函数体内,在函数体内即便对这个副本进行了修改,也不会影响函数体外部的变量数据.</p>\n<p>引用传递: 当使用变量的引用(引用类型的变量名,地址或指针)向函数传参数时, 函数内部对于该变量的修改会影响外部的变量.也就是说,一旦函数体内部修改了这个变量,外部的变量也会随之更改.</p>\n<p>关于值类型与引用类型以及涉及到的内存逃逸分析,会有单独一篇介绍</p>\n</li>\n<li><h3 id=\"零值\"><a href=\"#零值\" class=\"headerlink\" title=\"零值\"></a>零值</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th align=\"left\">零 值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>int, uint8, int32, int64</td>\n<td align=\"left\">0</td>\n</tr>\n<tr>\n<td>float32, float64</td>\n<td align=\"left\">0.0</td>\n</tr>\n<tr>\n<td>bool</td>\n<td align=\"left\"><code>false</code></td>\n</tr>\n<tr>\n<td>string</td>\n<td align=\"left\"><code>&quot;&quot;</code></td>\n</tr>\n<tr>\n<td>rune (int32)</td>\n<td align=\"left\">0</td>\n</tr>\n<tr>\n<td>byte(uint8)</td>\n<td align=\"left\">0</td>\n</tr>\n<tr>\n<td>interface</td>\n<td align=\"left\">nil</td>\n</tr>\n<tr>\n<td>map[key]value</td>\n<td align=\"left\">nil</td>\n</tr>\n<tr>\n<td>slice</td>\n<td align=\"left\">nil</td>\n</tr>\n<tr>\n<td>channel</td>\n<td align=\"left\">nil</td>\n</tr>\n</tbody></table>\n</li>\n<li><h3 id=\"包的导入\"><a href=\"#包的导入\" class=\"headerlink\" title=\"包的导入\"></a>包的导入</h3><p>一般使用绝对路径或者从 github 上导入某个包,而不建议使用 ./方式引入包</p>\n<p>以下为几种导入包的操作.</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 点操作</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"fmt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 点操作的意义在于当导入了上述包之后, 在使用包中的函数时,不必再加上包名.</span>\n<span class=\"token comment\">//例如 可以将 fmt.Println() 简写成 Println()</span>\n<span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 别名操作, 类似于 python 中的 import xxx as X</span>\n<span class=\"token comment\">// 语法略有不同</span>\n<span class=\"token keyword\">import</span> f <span class=\"token string\">\"fmt\"</span> <span class=\"token comment\">// import 后面的第一个变量为包的别名, 第二个为具体的包名</span>\nf<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><h4 id=\"包的初始化顺序\"><a href=\"#包的初始化顺序\" class=\"headerlink\" title=\"包的初始化顺序\"></a>包的初始化顺序</h4><p>在 import 包之后, 可以定义全局的常量或者变量.</p>\n<p>若想要使用 init 函数 (在 main 函数执行之前执行的函数,不可被调用), 则预先定义</p>\n<p>在init 函数之后, 可以定义若干函数体.</p>\n</li>\n</ul>\n</li>\n<li><h3 id=\"Go-程序的启动顺序\"><a href=\"#Go-程序的启动顺序\" class=\"headerlink\" title=\"Go 程序的启动顺序:\"></a>Go 程序的启动顺序:</h3><p>go 程序的初始化和执行都起始于 main包. 如果 main 包中还包含了其他的包,则优先在编译时导入,当有多个包导入了同一个包,该包仅被导入一次.如果导入的某个包还包含了其他的包,则优先导入这些包,整体类似于深度优先搜索,然后对各级包中的包级别的常量进行初始化,接着执行 init 函数. 等到所有包都被加载完毕, 开始对 main 包中的包级别常量进行初始化.然后执行 main 包中的 init 函数(如果有的话), 最后执行 main 函数</p>\n</li>\n</ol>\n","text":"Golang Tutorial 1Golang Constant Keywordsconst PI float64 = 3.1415926 特殊常量: iotaconst ( a = iota // iota 第一次出现时为 0, b // b = 1 c // c = 2 d ...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"Golang","slug":"Golang","count":4,"path":"api/categories/Golang.json"}],"tags":[{"name":"Programming Language","slug":"Programming-Language","count":4,"path":"api/tags/Programming-Language.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Golang-Tutorial-1\"><span class=\"toc-text\">Golang Tutorial 1</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Golang-Constant-Keywords\"><span class=\"toc-text\">Golang Constant Keywords</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E6%AE%8A%E5%B8%B8%E9%87%8F-iota\"><span class=\"toc-text\">特殊常量: iota</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B8%E5%9E%8B%E7%9A%84-iota-%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">典型的 iota 使用案例</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Golang-variables-Keywords\"><span class=\"toc-text\">Golang variables Keywords</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%B9%E6%AE%8A%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">特殊变量</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Golang-Basic-Datatype\"><span class=\"toc-text\">Golang Basic Datatype</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#bool%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">bool类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%80%BC%E5%9E%8B\"><span class=\"toc-text\">数值型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">字符串</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">其他数字类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%80%BC%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">值类型与引用类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9B%B6%E5%80%BC\"><span class=\"toc-text\">零值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%85%E7%9A%84%E5%AF%BC%E5%85%A5\"><span class=\"toc-text\">包的导入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8C%85%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">包的初始化顺序</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Go-%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%90%AF%E5%8A%A8%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">Go 程序的启动顺序:</span></a></li></ol></li></ol></li></ol>","author":{"name":"Hccc丶","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"曾经沧海难为水, 除却巫山不是云<br/>取次花丛懒回顾, 半缘修道半缘君","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/github.svg","link":"https://github.com/HiChen85"},"bilibili":{"icon":"/svg/logo.svg","link":"https://space.bilibili.com/512394874"}}}},"mapped":true,"prev_post":{"title":"Golang Tutorial 2","uid":"f20d4f48999b3be7c6a4f7d5c95630f9","slug":"Golang-Tutorial-2","date":"2021-09-02T22:10:10.000Z","updated":"2021-09-03T21:49:44.152Z","comments":true,"path":"api/articles/Golang-Tutorial-2.json","keywords":null,"cover":"/img/2.jpg","text":"Golang 的 String 详解本章介绍 Go 语言中 string 相关的内容. 包括字符串创建, 修改, 遍历和转换等操作 Unicode in Go在 go 中支持 Unicode(UTF-8), 因此字符也称为 Unicode 码点或者runes, 在内存中用 int...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"Golang","slug":"Golang","count":4,"path":"api/categories/Golang.json"}],"tags":[{"name":"Programming Language","slug":"Programming-Language","count":4,"path":"api/tags/Programming-Language.json"}],"author":{"name":"Hccc丶","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"曾经沧海难为水, 除却巫山不是云<br/>取次花丛懒回顾, 半缘修道半缘君","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/github.svg","link":"https://github.com/HiChen85"},"bilibili":{"icon":"/svg/logo.svg","link":"https://space.bilibili.com/512394874"}}}},"feature":true},"next_post":{}}